\import Data.Bool
\import Data.Or
\import Logic
\import hw01 (fac)
\import lect02 \hiding (Empty, absurd)

-- 0. Общие функции
\func list-test1 : lect02.List Nat => nil
\func list-test2 : lect02.List Nat => cons 1 nil
\func list-test3 : lect02.List Nat => cons 5 (cons 5 nil)
\func list-test4 : lect02.List Nat => cons 3 (cons 2 (cons 1 nil))

\func if {A : \Type} (x : Bool) (t e : A) : A \elim  x
  | true => t
  | false => e

\func less-than (_ _ : Nat) : Bool
  | zero, zero => false
  | zero, suc _ => true
  | suc _, zero => false
  | suc x, suc y => less-than x y

-- 1. Определите полиморфный tail для списков.
\func tail {A : \Type} (_ : lect02.List A) : List A
  | nil => nil
  | cons x xs => xs

\func tail-test1 : tail list-test1 = nil => idp
\func tail-test2 : tail list-test2 = nil => idp
\func tail-test3 : tail list-test3 = cons 5 nil => idp
\func tail-test4 : tail list-test4 = cons 2 (cons 1 nil) => idp

-- 2. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.
\func quick-sort {A : \Type} (compare : A -> A -> Bool) (xs : lect02.List A) : lect02.List A => s-aux (len xs) compare xs
  \where {
    \func len {A : \Type} (xs : lect02.List A) : Nat \elim xs
      | nil => 0
      | cons x xs => suc (len xs)
    \func f-aux {A : \Type} (fuel : Nat) (f : A -> Bool) (xs : lect02.List A) : lect02.List A \elim fuel
      | 0 => nil
      | suc fuel => \case xs \with {
        | nil => nil
        | cons x xs => if (f x) (cons x (f-aux fuel f xs)) (f-aux fuel f xs)
      }
    \func filter {A : \Type} (f : A -> Bool) (xs : lect02.List A) : lect02.List A => f-aux (len xs) f xs
    \func smaller {A : \Type} (compare : A -> A -> Bool) (xs : lect02.List A) (x : A) : lect02.List A
      => filter (\lam y => compare y x) xs
    \func eq-larger {A : \Type} (compare : A -> A -> Bool) (xs : lect02.List A) (x : A) : lect02.List A
      => filter (\lam y => not (compare y x)) xs
    \func s-aux {A : \Type} (fuel : Nat) (compare : A -> A -> Bool) (xs : lect02.List A) : lect02.List A \elim fuel
      | 0 => nil
      | suc fuel => \case xs \with {
        | nil => nil
        | cons x xs => s-aux fuel compare (smaller compare xs x) ++ cons x nil ++ s-aux fuel compare (eq-larger compare xs x)
      }
  }

\func quick-sort-test1 : quick-sort less-than list-test1 = nil => idp
\func quick-sort-test2 : quick-sort less-than list-test2 = cons 1 nil => idp
\func quick-sort-test3 : quick-sort less-than list-test3 = cons 5 (cons 5 nil) => idp
\func quick-sort-test4 : quick-sort less-than list-test4 = cons 1 (cons 2 (cons 3 nil)) => idp

-- 3. Докажите ассоциативность && и ||.

\func &&-assoc (x y z : Bool) : (x and y) and z = x and (y and z)
  | false, false, false => idp
  | false, false, true => idp
  | false, true, false => idp
  | false, true, true => idp
  | true, false, false => idp
  | true, false, true => idp
  | true, true, false => idp
  | true, true, true => idp

\func ||-assoc (x y z : Bool) : (x or y) or z = x or (y or z)
  | false, false, false => idp
  | false, false, true => idp
  | false, true, false => idp
  | false, true, true => idp
  | true, false, false => idp
  | true, false, true => idp
  | true, true, false => idp
  | true, true, true => idp

-- 4. Докажите, что fac 3 равно 6.
\func prove-fac : fac 3 = 6 => idp

-- 5. Докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t1 : (P and Q -> R) -> P -> Q -> R
\func t1 {P Q R : \Type} (f : \Sigma P Q -> R) (p : P) (q : Q) : R => f (p, q)

-- t2 : (P -> R) -> (Q -> R) -> P or Q -> R
\func t2 {P Q R : \Type} (f : P -> R) (g : Q -> R) (h : Or P Q) : R \elim h
  | inl x => f x
  | inr x => g x

-- t3 : ((P -> Q -> R) -> P) -> (P -> R) -> R
\func t3 {P Q R : \Type} (f : (P -> Q -> R) -> P) (g : P -> R) : R => g (f (\lam p _ => g p))

-- 6. Сформулируйте и докажите следующие пропозициональные тавтологии (choose 2 out of 3).

-- t4 : (P -> Q -> R) -> P and Q -> R
\func t4 {P Q R : \Type} (h : P -> Q -> R) (pq : \Sigma P Q) : R \elim pq
  | (p, q) => h p q

-- t5 : (P or Q -> P and Q) -> (P -> Q) and (Q -> P)
\func t5 {P Q : \Type} (h : Or P Q -> \Sigma P Q) : \Sigma (P -> Q) (Q -> P) => (
  \lam p => (h (inl p)).2,
  \lam q => (h (inr q)).1
)

-- t6 : ((((P -> Q) -> P) -> P) -> Q) -> Q
\func t6 {P Q : \Type} (h : (((P -> Q) -> P) -> P) -> Q) : Q => h (\lam g => g (\lam f => h (\lam _ => f)))

-- 7. Докажите следующие утверждения.

-- s1 : Если для любого x : Nat верно P(x), то существует x : Nat для которого P(x) верно.
\func s1 (P : Nat -> \Type) (h : \Pi (x : Nat) -> P x) : \Sigma (x : Nat) (P x) => (0, h 0)

-- s2 : Если не существует x : Nat такого, что верно P(x), то P(3) не верно.
\func s2 (P : Nat -> \Type) (h : \Sigma (x : Nat) (P x) -> Empty) : P 3 -> Empty => \lam p => h (3, p)

-- 8. Сформулируйте и докажите следующие утверждения.

-- s3 : Если для всех x : Nat верно, что P(x) влечет Q(x), и существует x : Nat для которого верно P(x), то существует x : Nat для которого верно Q(x).
\func s3 (P Q : Nat -> \Type) (h1 : \Pi (x : Nat) -> P x -> Q x) (h2 : \Sigma (x : Nat) (P x)) : \Sigma (x : Nat) (Q x) \elim h2
  | (x, px) => (x, h1 x px)

-- s4 : Если для всех x : Nat либо не верно P(x), либо не верно Q(x), то P(3) влечет, что Q(3) не верно.
\func s4 (P Q : Nat -> \Type) (h : \Pi (x : Nat) -> Or (P x -> Empty) (Q x -> Empty)) : P 3 -> Q 3 -> Empty =>
  \lam p3 q3 => \case h 3 \with {
    | inl np3 => np3 p3
    | inr nq3 => nq3 q3
  }